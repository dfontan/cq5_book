Services
========

We are going to look how to interact with the CQ services that are exposed via OSGI.

OSGI Description here.

Built-in Services
----------------
CQ5 has a few built-in services we can be found on the osgi console from cq admin console.
We are going to use the CQ mailer services.

.configure email server using gmail as rely
mail server = smtp.gmail.com +
port = 465 +
user = gmail.username@gmail.com +
password = gmail.password +

.apps/smithstone/components/forms/contact_form/submit.POST.jsp
[source,jsp]
----
sys::[cd cq5_tutorial/global-cq-content/src/main/resources/jcr_root/apps/smithstone/components/forms/contact_form/; git checkout master; git show 16e02f4:./submit.POST.jsp ]
----
<1> Obtain the service using the sling exposed object.
<2> Create a simple email message.
<3> Create the message from the request parameters and set the email message
<4> Send the email using the service

This page is fit for use in a production environment if you are decent programmer, you will maybe use a java object to the code like we will in the next section when we create see how we can use our own classes then move onto our own services. 


.global-cq-content/pom.xml
[source,xml]
----
sys::[cd cq5_tutorial/global-cq-content/; git checkout master; git show 16e02f4:./pom.xml]
----
<1> We need to adobe package for the mail service.
<2> We need the commons email which adobe has packaged up for use in CQ.

Custom Classes
--------------
We are going to see how to create custom classes, functions that we can deploy and consume from with our CQ application

[source,java]
----
sys::[cd cq5_tutorial/global/global-cq-domain/src/main/java/smithstone/components/forms; git checkout master; git show 5465041:./ContactFormHandler.java ]
----

[source,xml]
----
sys::[cd cq5_tutorial/global/global-cq-domain; git checkout master; git show 444b3e9:./pom.xml ]
----

[source,xml]
----
sys::[cd cq5_tutorial/global-cq-content/; git checkout master; git show 444b3e9:./pom.xml ]
----

[source,jsp]
----
sys::[cd cq5_tutorial/global-cq-content/src/main/resources/jcr_root/apps/smithstone/components/forms/contact_form/; git checkout master ; git show 444b3e9:./submit.POST.jsp ]
----
<1> Here we import the class from the classpath.
<2> We now use the class to send the email so we have little java code in the jsp , but this is still bad, we will see how to improve on this in best practices.
Video/Image of installing the bundle into the osgi console

Custom Services
---------------
Custom services osgi registered services, so here ware going to develop a simple bundle that exposes the current date time and place it on the homepage template, we will do the bad thing of using java code inside of jsps then modify that to use a custom class that calls the service like we did with the ContactFormHandler before.

[source,jsp]
----
sys::[cd cq5_tutorial/global-cq-content/src/main/resources/jcr_root/apps/smithstone/components/page/homepage/; git checkout master ; git show dfa8790:./homepage.jsp ]
----

[source,xml]
----
sys::[cd cq5_tutorial/global/global-domain/; git checkout master ; git show dfa8790:./pom.xml]
----

[source,java]
----
sys::[cd cq5_tutorial/global/global-domain/src/main/java/smithstone/osgi/ext/; git checkout master; git show dfa8790:./DateTimeServiceActivator.java]
----

[source,java]
----
sys::[cd cq5_tutorial/global/global-domain/src/main/java/smithstone/services/; git checkout master ; git show dfa8790:./DateTime.java ]
----

[source,java]
----
sys::[cd cq5_tutorial/global/global-domain/src/main/java/smithstone/services/; git checkout master; git show dfa8790:./DateTimeService.java]
----


